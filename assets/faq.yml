---
# Additional page configuration

# Additional configurations are loaded using its file name, minus the extension, as an anchor (https://<mydashboad>#<config>). 
# `config.yml` is still used as a base configuration, and all values here will overwrite it, so you don't have to re-defined everything


subtitle: "F.A.Q"

# This overwrites message config. Setting it to empty to remove message from this page and keep it only in the main one:
# as we want to include a differente link here (so we can get back to home page), we need to replicate all links or they will be revome when overwriting the links field:
links:
  - name: "Home"
    icon: "fa-sharp fa-solid fa-house"
    url: ""

  - name: "FAQ"
    icon: "fa fa-question"
    url: "#faq"
    
  - name: "Contribute"
    icon: "fab fa-github"
    url: "https://github.com/arminask/windows-arm-apps"
    target: "_blank" # optional html a tag target attribute 

  - name: "Resources"
    icon: "fab fa-cog"
    url: "#resources"

message:
  style: "is-dark" # See https://bulma.io/documentation/components/message/#colors for styling options.
  title: "Frequently asked questions"
  icon: "fa fa-question"
  content: "<h2><li>What's the purpose of this website?</li></h2> <br />The purpose of this website is to list Windows software that runs natively on ARM architecture without emulation, all in one place. Instead of searching for specific software with the needed architecture, you can look at our list here to find the application you need. Since I am not aware of an existing website that lists apps for specific architectures, this project came to life.<br /> <h2><li>Can I also add new software to this website?</li></h2> <br />Of course, contributions are always welcome. If you have found Windows native ARM software or noticed an error/addition, please contribute on GitHub by creating a pull request.<br /> <h2><li>Can I run non native x86 software on Windows ARM?</li></h2> <br />Yes. No one is preventing you from installing 32/64-bit Windows software. It will work, but emulation is not as fast as running the software natively. Sidenote: Windows 11 supports x64 software emulation, while Windows 10 can only emulate x86 software, meaning x64 architecture software won't run on Windows 10. If you're using a Windows 11 build, x64 emulation might not work, as it also depends on your SoC, firmware, and other factors.<br /><h2><li>What is ARM64EC?</li></h2> <br />In short, the best of both worlds for Windows 11. Before porting an entire application from x64 to ARM64, developers can choose to partially migrate its components one step at a time. Additionally ARM64EC builds maintain compatibility to legacy or 3rd party x86 & x64 plugins, while the core app reaps the performance gains of a native ARM application.<br /><h2><li>What's going to happen to ARM32 applications?</li></h2> <br />The sun will set for the scarce 32-bit ARM Windows apps in the foreseeable future. On the one hand Microsoft announced that it will carve out ARM32 support from Windows 11. The bigger change will occur in future ARM processors though, as these will no longer offer a native 32-bit execution mode. Any suggestions to avert this ARMageddon? Yes, keep running Windows 10 or request 64-bit Windows builds (ARM64) from the application developer.<br />"
